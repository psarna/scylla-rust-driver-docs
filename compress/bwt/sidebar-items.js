initSidebarItems({"constant":[["ALPHABET_SIZE",""]],"fn":[["compute_inversion_table","Compute an inversion jump table, needed for BWT decoding"],["compute_suffixes","Compute a suffix array from a given input string Resulting suffixes are guaranteed to be alphabetically sorted Run time: O(N^3), memory: N words (suf_array) + ALPHABET_SIZE words (Radix)"],["decode","Decode a BWT block, given it's origin, and using 'table' temporarily"],["decode_simple","A simplified BWT decode function, which allocates a temporary suffix array"],["encode","Encode BWT of a given input, using the 'suf_array'"],["encode_simple","Transform an input block into the output slice, all-inclusive version. Returns the index of the original string in the output matrix."]],"mod":[["dc","DC (Distance Coding) forward and backward transformation. Designed to be used on BWT block output for compression."],["mtf","MTF (Move To Front) encoder/decoder Produces a rank for each input character based on when it was seen last time. Useful for BWT output encoding, which produces a lot of zeroes and low ranks."]],"struct":[["Decoder","This structure is used to decode a stream of BWT blocks. This wraps an internal reader which is read from when this decoder's read method is called."],["Encoder","This structure is used to compress a stream of bytes using the BWT. This is a wrapper around an internal writer which bytes will be written to."],["InverseIterator","An iterator over inverse BWT Run time: O(N), memory: N words (table)"],["Radix","Radix sorting primitive"],["TransformIterator","An iterator over BWT output"]],"type":[["Symbol","A base element for the transformation"]]});